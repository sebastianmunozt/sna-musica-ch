pacman::p_load(pacman, tidyverse, networkD3,igraph, htmlwidgets, openxlsx, readr)
edges <- read.xlsx("data/edges.xlsx", sheet = 1)
edges <- read.xlsx("data/edges_data.xlsx", sheet = 1)
nodes <- read.xlsx("data/nodes_data.xlsx", sheet = 1)
View(nodes)
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_1"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
names(edges)
View(edges)
# Calcular el grado (número de conexiones) de cada nodo
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
View(node_degrees)
# Añadir la información de grado a los nodos
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))  # Sustituir NA con 1
# Crear nodos para networkD3
nodes_d3 <- nodes %>%
mutate(size = degree * 5,   # Escalar el tamaño del nodo según el grado
group = 1) %>%       # Grupo base (se actualizará si se requieren diferencias de color)
select(id = spotify_id, name, size, group)
# Crear aristas para networkD3
edges_d3 <- edges %>%
mutate(source = match(id_0, nodes$spotify_id) - 1,  # Convertir a índices de 0
target = match(id_01, nodes$spotify_id) - 1)    # Convertir a índices de 0
# Grafo interactivo con tamaño y etiquetas
forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
View(nodes_d3)
network_plot <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
print(network_plot)
# Crear el grafo interactivo con la paleta de colores y personalización de etiquetas
network3d_combined <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3_genre,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85,
colourScale = colors_genre  # Aplicar la paleta de colores
) %>%
htmlwidgets::onRender("
function(el, x) {
// Seleccionar las etiquetas de los nodos y ajustar su estilo
d3.select(el).selectAll('.node text')
.style('fill', 'black')       // Cambiar el color del texto a negro
.style('font-size', '16px');    // Ajustar el tamaño de fuente a 16px
}
")
# Crear el grafo interactivo con la paleta de colores y personalización de etiquetas
network3d_combined <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85,
colourScale = colors_genre  # Aplicar la paleta de colores
) %>%
htmlwidgets::onRender("
function(el, x) {
// Seleccionar las etiquetas de los nodos y ajustar su estilo
d3.select(el).selectAll('.node text')
.style('fill', 'black')       // Cambiar el color del texto a negro
.style('font-size', '16px');    // Ajustar el tamaño de fuente a 16px
}
")
# Crear el grafo interactivo con la paleta de colores y personalización de etiquetas
network3d_combined <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
) %>%
htmlwidgets::onRender("
function(el, x) {
// Seleccionar las etiquetas de los nodos y ajustar su estilo
d3.select(el).selectAll('.node text')
.style('fill', 'black')       // Cambiar el color del texto a negro
.style('font-size', '16px');    // Ajustar el tamaño de fuente a 16px
}
")
# Guardar el widget en un archivo HTML
htmlwidgets::saveWidget(network3d_combined, "network3d_mchile.html", selfcontained = TRUE)
## Abro bases
edges <- read.xlsx("data/edges_data.xlsx", sheet = 1)
nodes <- read.xlsx("data/nodes_data.xlsx", sheet = 1)
View(edges)
names(edges)
# Calcular el grado (número de conexiones) de cada nodo usando las columnas "id_0" y "id_01" de edges
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# Unir la información del grado a la tabla de nodos.
# Para los nodos que no aparecen en la tabla de aristas se asigna un grado mínimo de 1.
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
# Crear la tabla de nodos para networkD3.
# Se escala el tamaño del nodo en función del grado y se asigna un único grupo (1) a todos.
nodes_d3 <- nodes %>%
mutate(size = degree * 5,
group = 1) %>%      # Todos los nodos tendrán el mismo grupo, por lo que se usará el color predeterminado
select(id = spotify_id, name, size, group)
# Procesar la tabla de aristas para networkD3:
# Se convierte el identificador de cada nodo a índices basados en 0.
edges_d3 <- edges %>%
mutate(source = match(id_0, nodes$spotify_id) - 1,
target = match(id_01, nodes$spotify_id) - 1)
# ---------------------------
# Creación del grafo interactivo sin colores diferenciados
# ---------------------------
network_simple <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",    # Al asignar el mismo grupo, se usará el color por defecto para todos
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
# Visualizar el grafo en el panel Viewer de RStudio
print(network_simple)
# Guardar el widget en un archivo HTML auto-contenido
htmlwidgets::saveWidget(network_simple, "network_simple.html", selfcontained = TRUE)
head(nodes)
head(edges)
View(nodes_d3)
View(edges_d3)
sum(is.na(match(edges$id_0, nodes$spotify_id)))
sum(is.na(match(edges$id_01, nodes$spotify_id)))
# Verificar coincidencia de claves
print(head(nodes$spotify_id))
print(head(edges$id_0))
print(head(edges$id_01))
# Crear índices y verificar NA
indices_0 <- match(edges$id_0, nodes$spotify_id) - 1
indices_1 <- match(edges$id_01, nodes$spotify_id) - 1
print(head(indices_0))
print(head(indices_1))
print(sum(is.na(indices_0)))
print(sum(is.na(indices_1)))
class(edges$id_0)
class(edges$id_01)
class(nodes$spotify_id)
View(edges)
View(nodes)
filtered_edges <- edges[edges$id_0 %in% nodes$spotify_id &
edges$id_01 %in% nodes$spotify_id, ]
# Opcional: visualizar algunas filas para confirmar el filtrado
print(head(filtered_edges))
View(filtered_edges)
edges <- edges[edges$id_0 %in% nodes$spotify_id &
edges$id_01 %in% nodes$spotify_id, ]
# Calcular el grado (número de conexiones) de cada nodo usando las columnas "id_0" y "id_01" de edges
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# Unir la información del grado a la tabla de nodos.
# Para los nodos que no aparecen en la tabla de aristas se asigna un grado mínimo de 1.
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
# Calcular el grado (número de conexiones) de cada nodo usando las columnas "id_0" y "id_01" de edges
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# Unir la información del grado a la tabla de nodos.
# Para los nodos que no aparecen en la tabla de aristas se asigna un grado mínimo de 1.
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
edges <- read.xlsx("data/edges_data.xlsx", sheet = 1)
nodes <- read.xlsx("data/nodes_data.xlsx", sheet = 1)
edges <- edges[edges$id_0 %in% nodes$spotify_id &
edges$id_01 %in% nodes$spotify_id, ]
# Calcular el grado (número de conexiones) de cada nodo usando las columnas "id_0" y "id_01" de edges
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
(degree = ifelse(is.na(degree), 1, degree))
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
View(nodes)
# Crear la tabla de nodos para networkD3.
# Se escala el tamaño del nodo en función del grado y se asigna un único grupo (1) a todos.
nodes_d3 <- nodes %>%
mutate(size = degree * 5,
group = 1) %>%      # Todos los nodos tendrán el mismo grupo, por lo que se usará el color predeterminado
select(id = spotify_id, name, size, group)
# Procesar la tabla de aristas para networkD3:
# Se convierte el identificador de cada nodo a índices basados en 0.
edges_d3 <- edges %>%
mutate(source = match(id_0, nodes$spotify_id) - 1,
target = match(id_01, nodes$spotify_id) - 1)
# ---------------------------
# Creación del grafo interactivo sin colores diferenciados
# ---------------------------
network_simple <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",    # Al asignar el mismo grupo, se usará el color por defecto para todos
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
# Visualizar el grafo en el panel Viewer de RStudio
print(network_simple)
# Guardar el widget en un archivo HTML auto-contenido
htmlwidgets::saveWidget(network_simple, "network_mchile.html", selfcontained = TRUE)
## Cargo paquetes
pacman::p_load(pacman, tidyverse, networkD3,igraph, htmlwidgets, openxlsx, readr)
## Abro bases
edges <- read.xlsx("data/edges_data.xlsx", sheet = 1)
nodes <- read.xlsx("data/nodes_data.xlsx", sheet = 1)
head(nodes)
head(edges)
edges <- edges[edges$id_0 %in% nodes$spotify_id &
edges$id_01 %in% nodes$spotify_id, ]
# Calcular el grado (número de conexiones) de cada nodo usando las columnas "id_0" y "id_01" de edges
node_degrees <- edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# Unir la información del grado a la tabla de nodos.
# Para los nodos que no aparecen en la tabla de aristas se asigna un grado mínimo de 1.
nodes <- nodes %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
# Crear la tabla de nodos para networkD3.
# Se escala el tamaño del nodo en función del grado y se asigna un único grupo (1) a todos.
nodes_d3 <- nodes %>%
mutate(size = degree * 5,
group = 1) %>%      # Todos los nodos tendrán el mismo grupo, por lo que se usará el color predeterminado
select(id = spotify_id, name, size, group)
# Procesar la tabla de aristas para networkD3:
# Se convierte el identificador de cada nodo a índices basados en 0.
edges_d3 <- edges %>%
mutate(source = match(id_0, nodes$spotify_id) - 1,
target = match(id_01, nodes$spotify_id) - 1)
# ---------------------------
# Creación del grafo interactivo sin colores diferenciados
# ---------------------------
network_simple <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",    # Al asignar el mismo grupo, se usará el color por defecto para todos
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
# Visualizar el grafo en el panel Viewer de RStudio
print(network_simple)
htmlwidgets::saveWidget(network_simple, "network_simple.html", selfcontained = TRUE)
View(nodes)
table(nodes$genero_r)
View(nodes)
# -------------------------------------------------------------
# 1. Filtrar los nodos chilenos a partir de la variable "country"
#    Se asume que los artistas chilenos tienen "chile" en la columna country.
# -------------------------------------------------------------
nodes_chile <- nodes %>%
filter(country == "chile")
# -------------------------------------------------------------
# 2. Filtrar las aristas para incluir solo aquellas cuyos nodos
#    existan en la base de nodos chilenos.
# -------------------------------------------------------------
filtered_edges <- edges[edges$id_0 %in% nodes_chile$spotify_id &
edges$id_01 %in% nodes_chile$spotify_id, ]
# Opcional: revisar algunos registros filtrados
print(head(filtered_edges))
# -------------------------------------------------------------
# 3. Calcular el grado (número de conexiones) de cada nodo en
#    base a las aristas filtradas
# -------------------------------------------------------------
node_degrees <- filtered_edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# -------------------------------------------------------------
# 4. Unir la información del grado a la base de nodos chilenos
#    Si un nodo no tiene aristas se le asigna un grado mínimo de 1.
# -------------------------------------------------------------
nodes_chile <- nodes_chile %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
# -------------------------------------------------------------
# 1. Filtrar los nodos chilenos a partir de la variable "country"
#    Se asume que los artistas chilenos tienen "chile" en la columna country.
# -------------------------------------------------------------
nodes_chile <- nodes %>%
filter(country == "chile")
# -------------------------------------------------------------
# 2. Filtrar las aristas para incluir solo aquellas cuyos nodos
#    existan en la base de nodos chilenos.
# -------------------------------------------------------------
filtered_edges <- edges[edges$id_0 %in% nodes_chile$spotify_id &
edges$id_01 %in% nodes_chile$spotify_id, ]
# Opcional: revisar algunos registros filtrados
print(head(filtered_edges))
# -------------------------------------------------------------
# 3. Calcular el grado (número de conexiones) de cada nodo en
#    base a las aristas filtradas
# -------------------------------------------------------------
node_degrees <- filtered_edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# -------------------------------------------------------------
# 4. Unir la información del grado a la base de nodos chilenos
#    Si un nodo no tiene aristas se le asigna un grado mínimo de 1.
# -------------------------------------------------------------
nodes_chile <- nodes_chile %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(degree), 1, degree))
nodes_chile <- nodes_chile %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(.data$degree), 1, .data$degree))
View(nodes_chile)
View(nodes)
edges <- read.xlsx("data/edges_data.xlsx", sheet = 1)
nodes <- read.xlsx("data/nodes_data.xlsx", sheet = 1)
nodes_chile <- nodes %>%
filter(country == "chile")
# -------------------------------------------------------------
# 2. Filtrar las aristas para incluir solo aquellas cuyos nodos
#    existan en la base de nodos chilenos.
# -------------------------------------------------------------
filtered_edges <- edges[edges$id_0 %in% nodes_chile$spotify_id &
edges$id_01 %in% nodes_chile$spotify_id, ]
# -------------------------------------------------------------
# 3. Calcular el grado (número de conexiones) de cada nodo en
#    base a las aristas filtradas
# -------------------------------------------------------------
node_degrees <- filtered_edges %>%
pivot_longer(cols = c("id_0", "id_01"), values_to = "node") %>%
count(node) %>%
rename(spotify_id = node, degree = n)
# -------------------------------------------------------------
# 4. Unir la información del grado a la base de nodos chilenos
#    Si un nodo no tiene aristas se le asigna un grado mínimo de 1.
# -------------------------------------------------------------
nodes_chile <- nodes_chile %>%
left_join(node_degrees, by = "spotify_id") %>%
mutate(degree = ifelse(is.na(.data$degree), 1, .data$degree))
# -------------------------------------------------------------
# 5. Preparar la tabla de nodos para networkD3:
#    Se escala el tamaño del nodo (por ejemplo, degree * 5) y se asigna un grupo único.
# -------------------------------------------------------------
nodes_d3 <- nodes_chile %>%
mutate(size = degree * 5,
group = 1) %>%    # Todos en el mismo grupo, usará el color predeterminado
select(id = spotify_id, name, size, group)
# -------------------------------------------------------------
# 6. Procesar la tabla de aristas para networkD3:
#    Convertir los identificadores (id_0 e id_01) a índices basados en 0.
# -------------------------------------------------------------
edges_d3 <- filtered_edges %>%
mutate(source = match(id_0, nodes_chile$spotify_id) - 1,
target = match(id_01, nodes_chile$spotify_id) - 1)
# -------------------------------------------------------------
# 7. Generar el grafo interactivo sin diferenciación de colores
# -------------------------------------------------------------
network_chile <- forceNetwork(
Links = edges_d3,
Nodes = nodes_d3,
Source = "source",
Target = "target",
NodeID = "name",
Group = "group",     # Con un único grupo se usará el color predeterminado
Nodesize = "size",
fontSize = 14,
linkDistance = 100,
zoom = TRUE,
opacity = 0.85
)
# Mostrar el grafo en el Viewer de RStudio
print(network_chile)
# -------------------------------------------------------------
# 8. Guardar el widget en un archivo HTML auto-contenido
# -------------------------------------------------------------
htmlwidgets::saveWidget(network_chile, "network_chile.html", selfcontained = TRUE)
